The [authentication filter|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/RestAuthenticationFilter.html]
uses the default @authenticationManager@ bean, which in turn uses all the registered authentication
providers. See the [Spring Security Core guide|http://grails-plugins.github.io/grails-spring-security-core/docs/manual/guide/authenticationProviders.html]
for more information about how to define your own providers. Note that you can easily plug any Spring Security sub-plugin
(like the LDAP one) to use a different authentication strategy.

If the authentication is successful, a [token generator|guide:tokenGeneration] is used to generate a token, and a
[token storage|guide:tokenStorage] implementation is used to store the token.

Finally, the JSON response sent back to the client is rendered by a @restAuthenticationTokenJsonRenderer@ bean. The plugin
offers you a [default implementation|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/token/rendering/DefaultRestAuthenticationTokenJsonRenderer.html]
that renders a response like this:

{code}
{
    "username": "john.doe",
    "token": "1a2b3c4d",
    "roles": [
        "ADMIN",
        "USER"
    ]
}
{code}

If you want your own, simply create a class implementing
[RestAuthenticationTokenJsonRenderer|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/token/rendering/RestAuthenticationTokenJsonRenderer.html]
and wire it up in @resources.groovy@ with name @restAuthenticationTokenJsonRenderer@.

{note}
The @UserDetails@ object stored in the security context, and passed to the JSON renderer, is coming from the configured
@userDetailsService@ bean. If you want to render additional information in your JSON response, you have to:
# Configure an alternative @userDetailsService@ bean that retrieves the additional information you want, and put it in a @UserDetails@ object.
# Configure an alternative @restAuthenticationTokenJsonRenderer@ that reads that information from the @restAuthenticationToken.principal@ object.
{note}

The current version expects the username and password as request parameters (there is a
[task planned|https://github.com/alvarosanchez/grails-spring-security-rest/issues/2] to add JSON support). Both the
parameter names, the URL where the filter is listening, and the response code sent when the authentication fails are
configurable with the following @Config.groovy@ properties:

{table}
*Config key*                                                | *Default value*
@grails.plugin.springsecurity.rest.login.endpointUrl@       | @/login@
@grails.plugin.springsecurity.rest.login.usernameParameter@ | @username@
@grails.plugin.springsecurity.rest.login.passwordParameter@ | @password@
@grails.plugin.springsecurity.rest.login.failureStatusCode@ | @403@
{table}
